AWSTemplateFormatVersion: "2010-09-09"
Description: "EKS cluster creation with node group and fargate profile"

Parameters: 
  VPCStackName: 
    Type: String
    Default: vpc

Resources:
  MyEKSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  MyManagedEKS:
    Type: "AWS::EKS::Cluster"
    Properties:
      Name: my-cluster
      Version: "1.30"
      RoleArn: !GetAtt MyEKSRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - Fn::ImportValue: !Sub "${VPCStackName}-SubnetId1"
          - Fn::ImportValue: !Sub "${VPCStackName}-SubnetId2"
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub "${VPCStackName}-SecurityGroupId"
        EndpointPublicAccess: true
        EndpointPrivateAccess: false

# We can add a Node Group or Fargate profile to the cluster.

  MyNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy

  MyNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref MyManagedEKS
      NodeRole: !GetAtt MyNodeRole.Arn
      InstanceTypes:
        - t2.small
      ScalingConfig:
        DesiredSize: 2
        MinSize: 2
        MaxSize: 6
      Labels:
        Name: my-node-group
      Subnets:
        - Fn::ImportValue: !Sub "${VPCStackName}-SubnetId1"
        - Fn::ImportValue: !Sub "${VPCStackName}-SubnetId2"

  MyFargateProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks-fargate-pods.amazonaws.com
            Action:
              - sts:AssumeRole

  MyFargatePodExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks-fargate-pods.amazonaws.com
            Action:
              - sts:AssumeRole
            Condition:
              ArnLike:
                aws:SourceArn: !Sub 'arn:${AWS::Partition}:eks:*:${AWS::AccountId}:fargateprofile/*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy

  MyFargateProfile:
    Type: AWS::EKS::FargateProfile
    Properties:
      ClusterName: !Ref MyManagedEKS
      FargateProfileName: my-profile
      PodExecutionRoleArn: !GetAtt MyFargatePodExecutionRole.Arn
      Selectors:
        - Namespace: default
      Subnets:
        - Fn::ImportValue: !Sub "${VPCStackName}-SubnetId3"
        - Fn::ImportValue: !Sub "${VPCStackName}-SubnetId4"

Outputs:
  MyManagedEKS:
    Value: !GetAtt MyManagedEKS.Arn
    Description: The name of the cluster created
    Export:
      Name: !Sub "${AWS::StackName}-MyManagedEKS"